from typing_extensions import dataclass_transform
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer


file_path = '/content/bf3_data_2022_01_07.xlsx'
data = pd.read_excel(file_path)


for column in data.columns:
    data[column] = pd.to_numeric(data[column], errors='coerce')

# Fill NaN values with the mean of each column
data.fillna(data.mean(), inplace=True)

print(data)


print(data.isnull().sum())
data['CO_CO2_Ratio'] = data['CO'] / data['CO2']
# Extract features and target variable
print(data.head())
X = data.drop(columns=['CO2', 'CO', 'CO_CO2_Ratio'])
y = data[['CO', 'CO2', 'CO_CO2_Ratio']]
# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



imputer = SimpleImputer(strategy='mean')

# Impute missing values in X_train and X_test
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

models = {
    'LinearRegression': LinearRegression(),
    'RandomForestRegressor': RandomForestRegressor(n_estimators=100, random_state=42)
}

results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results[name] = {'model': model, 'mse': mse, 'r2': r2}
    print(f'{name} - MSE: {mse}, R2: {r2}')






best_model_name = max(results, key=lambda x: results[x]['r2'])
best_model = results[best_model_name]['model']
print(f'Best model: {best_model_name}')
plt.figure(figsize=(10, 6))
plt.scatter(y_test['CO_CO2_Ratio'], best_model.predict(X_test)[:, 2], alpha=0.7)
plt.xlabel('Actual CO/CO2 Ratio')
plt.ylabel('Predicted CO/CO2 Ratio')
plt.title(f'Actual vs Predicted CO/CO2 Ratio using {best_model_name}')
plt.plot([min(y_test['CO_CO2_Ratio']),max(y_test['CO_CO2_Ratio'])],
[min(y_test['CO_CO2_Ratio']), max(y_test['CO_CO2_Ratio'])], color='red', lw=2)
plt.show()







new_data = np.array([[315163, 3.16, 129, 4, 209, 3.35, 3.2, 7829, 23.08, 30, 24.52, 1058, 2.99,
1.49, 120, 143, 109, 128, 0, 125, 1, 3.94, 71.5]])
new_data_pred = best_model.predict(new_data)
print(f'Predicted CO: {new_data_pred[0][0]}')
print(f'Predicted CO2: {new_data_pred[0][1]}')
print(f'Predicted CO/CO2 Ratio: {new_data_pred[0][2]}')

